// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init



generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Seller{
  id Int @id @default(autoincrement())
  storeName String @unique
  gstNumber String @unique
  email String @unique
  address String
  contactNumber String
  password String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products Product[] //Array of related Product records 
}

model Product {
  id Int @id @default(autoincrement())
  name String 
  description String
  price Int 
  category String
  stock Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 

  productImages ProductImage[]

  sellerId Int//Foreign key (primary key in the parent table)
  // specifies that sellerId refers to the id field in the Seller model
  seller Seller @relation(fields: [sellerId],references: [id]) //Relation field to Seller

  //a one-to-many relationship with the CartItem table
  cartItems CartItem[] 

  // a one-to-many relationship with the Order model
  orderItems OrderItem[]
}

// this will be a one to many relationship between the product and the images a product model can be related to many ProductImage models,

model ProductImage {
  id Int @id @default(autoincrement())
  imageUrl String

  // productId
  productId Int //foreign key (primary key in the parent Table)
  // specifies that productId refers to the id field in the  Product model , 
  product Product @relation(fields:[productId],references:[id]) //Relation field to Product
}

model Buyer {
  id Int @id @default(autoincrement())
  username String @unique
  email String @unique
  password String
  isVerified Boolean @default(false)
  cart Cart?

  // a one-to-many relationship with the Address model
  addresses Address[]

  // a one-to-many relationship with the Order table
  orders Order[]
}


model Cart{
  id String @id @default(uuid())

  cartCount Int @default(0)

  buyerId Int @unique
  buyer Buyer @relation(fields: [buyerId],references:[id])

  cartItems CartItem[]
}

model CartItem {
  id String @id @default(uuid())

  quantity Int @default(1)

  cartId String //relate to the Cart model with it's id,
  // specifies that cartId refers to the id of the Cart model
  cart Cart @relation(fields:[cartId],references: [id])

  productId Int // foreign key (refers to the primary key of the parent model)
  // specifies that productId refers to the id of the Product model
  product Product @relation(fields: [productId],references: [id])
}

model Address {
  id String @id @default(uuid())

  building String
  street String 
  city String
  state String
  pin String
  country String 

  isDefault Boolean @default(false)
  
  buyerId Int //foreign key as the id of the table we want this table to connect 
  buyer Buyer @relation(fields:[buyerId],references: [id])

  orders Order[]
}

model Order {
  id String @id @default(uuid())
  total Int @default(0)
  contactNumber String 
  deliveryInstructions Json
  paymentOption Json 

  isPaid Boolean @default(false)
  isDelivered Boolean @default(false)
  isReturned Boolean @default(false)

  buyerId Int //foreign key (the primary key of the Buyer table)

  // this specifies that buyerId refers to the id of the Buyer table
  buyer Buyer @relation(fields: [buyerId],references: [id])
  // a one-to-one relationship with the Address model
  addressId String // foreign key refering to the primary key of a record in an Address table

  address Address @relation(fields: [addressId],references: [id]) //this specifies that addressId refers to the id of the Address table  
  orderItems OrderItem[]
}

model OrderItem {
  id String @id @default(uuid())

  quantity Int @default(1)
  price Int //snapshot of the product at the time of the order

  orderId String //one-to-Many relationshp with the Order table
  order Order @relation(fields: [orderId], references: [id])  

  productId Int
  product Product @relation(fields: [productId] , references: [id])
}